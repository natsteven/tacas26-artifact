(set-logic ALL)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool 	(or (and (= x "") (= y "")) 		(and (not (= x "")) (not (= y "")) 			(let ((x_head (str.at x 0)) 				(y_head (str.at y 0)) 				(x_tail (str.substr x 1 (- (str.len x) 1))) 				(y_tail (str.substr y 1 (- (str.len y) 1)))) 			(and (= (str.to_code y_head) 				(ite (and (<= 65 (str.to_code x_head)) (<= (str.to_code x_head) 90)) 					(+ (str.to_code x_head) 32) 					(str.to_code x_head))) 				(toLower x_tail y_tail))))))
(declare-fun sym800 () String)
(declare-fun sym209 () String)
(declare-fun sym1899 () String)
(declare-fun sym2648 () String)
(declare-fun sym551 () String)
(declare-fun sym2117 () String)
(declare-fun sym1038 () String)
(declare-fun sym2333 () String)
(declare-fun sym1256 () String)
(declare-fun sym2551 () String)
(declare-fun sym1472 () String)
(declare-fun sym161 () String)
(declare-fun sym1690 () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "D") (str.to_re "E") (str.to_re "F") (str.to_re "G") (str.to_re "H") (str.to_re "I") (str.to_re "J") (str.to_re "K") (str.to_re "L") (str.to_re "M") (str.to_re "N") (str.to_re "O") (str.to_re "P") (str.to_re "Q") (str.to_re "R") (str.to_re "S") (str.to_re "T") (str.to_re "U") (str.to_re "V") (str.to_re "W") (str.to_re "X") (str.to_re "Y") (str.to_re "Z") (str.to_re "a") (str.to_re "b") (str.to_re "c") (str.to_re "d") (str.to_re "e") (str.to_re "f") (str.to_re "g") (str.to_re "h") (str.to_re "i") (str.to_re "j") (str.to_re "k") (str.to_re "l") (str.to_re "m") (str.to_re "n") (str.to_re "o") (str.to_re "p") (str.to_re "q") (str.to_re "r") (str.to_re "s") (str.to_re "t") (str.to_re "u") (str.to_re "v") (str.to_re "w") (str.to_re "x") (str.to_re "y") (str.to_re "z") ))
)
(declare-fun L0  () String)
(assert (toLower (str.substr sym2551  0 1) L0 ))
(declare-fun L2  () String)
(assert (toLower (str.substr sym800  0 1) L2 ))
(declare-fun L1  () String)
(assert (toLower (str.substr sym1256  0 1) L1 ))
(declare-fun L4  () String)
(assert (toLower (str.substr sym551  0 1) L4 ))
(declare-fun L3  () String)
(assert (toLower (str.substr sym1690  0 1) L3 ))
(declare-fun L22  () String)
(assert (toLower (str.substr sym1472  0 1) L22 ))
(declare-fun L6  () String)
(assert (toLower (str.substr sym2117  0 1) L6 ))
(declare-fun L10  () String)
(assert (toLower (str.substr sym209  0 1) L10 ))
(declare-fun L20  () String)
(assert (toLower (str.substr sym2333  0 1) L20 ))
(declare-fun L8  () String)
(assert (toLower (str.substr sym1899  0 1) L8 ))
(declare-fun L15  () String)
(assert (toLower (str.substr sym2648  0 1) L15 ))
(declare-fun L13  () String)
(assert (toLower (str.substr sym1038  0 1) L13 ))

(assert (str.in_re sym1690 Alphabet))
(assert (str.in_re sym161 Alphabet))
(assert (str.in_re sym1472 Alphabet))
(assert (str.in_re sym2551 Alphabet))
(assert (str.in_re sym1256 Alphabet))
(assert (str.in_re sym2333 Alphabet))
(assert (str.in_re sym1038 Alphabet))
(assert (str.in_re sym2117 Alphabet))
(assert (str.in_re sym551 Alphabet))
(assert (str.in_re sym2648 Alphabet))
(assert (str.in_re sym1899 Alphabet))
(assert (str.in_re sym209 Alphabet))
(assert (str.in_re sym800 Alphabet))(assert (<= 1 (str.len sym1472 )))
(assert (<= 1 (str.len sym800 )))
(assert (<= 1 (str.len sym2333 )))
(assert (<= 1 (str.len sym551 )))
(assert (<= 1 (str.len sym1690 )))
(assert (<= 1 (str.len sym2551 )))
(assert (<= 1 (str.len sym1038 )))
(assert (<= 1 (str.len sym2117 )))
(assert (<= 1 (str.len sym1899 )))
(assert (<= 1 (str.len sym1256 )))
(assert (<= 1 (str.len sym2648 )))
(assert (<= 1 (str.len sym209 )))

(assert (not (= L0 "k" )))
(assert (not (= L1 "q" )))
(assert (= "" sym161 ))
(assert (not (= "" sym2333 )))
(assert (not (= "" sym800 )))
(assert (not (= L2 "q" )))
(assert (not (= L3 "q" )))
(assert (not (= "n" "y" )))
(assert (= "y" "y" ))
(assert (= L4 "p" ))
(assert (not (= "" sym2117 )))
(assert (not (= L2 "p" )))
(assert (not (= L6 "q" )))
(assert (not (= L2 "k" )))
(assert (not (= "" "n" )))
(assert (not (= "" sym209 )))
(assert (= L8 "p" ))
(assert (not (= L6 "p" )))
(assert (= L10 "y" ))
(assert (= L2 "g" ))
(assert (not (= "" sym1472 )))
(assert (not (= "" sym1899 )))
(assert (not (= L0 "p" )))
(assert (= L13 "p" ))
(assert (not (= L1 "k" )))
(assert (not (= L15 "y" )))
(assert (= L1 "g" ))
(assert (not (= L6 "k" )))
(assert (= "" "" ))
(assert (= L0 "g" ))
(assert (not (= "" L15 )))
(assert (not (= "" sym2648 )))
(assert (not (= "" "y" )))
(assert (= L20 "p" ))
(assert (not (= L4 "q" )))
(assert (not (= L22 "q" )))
(assert (= L22 "p" ))
(assert (not (= "" "q" )))
(assert (not (= "" sym1256 )))
(assert (not (= "" sym551 )))
(assert (not (= "" sym1038 )))
(assert (= L6 "g" ))
(assert (not (= L3 "p" )))
(assert (not (= L13 "q" )))
(assert (not (= "" L10 )))
(assert (not (= L20 "q" )))
(assert (not (= "" sym2551 )))
(assert (not (= "" sym1690 )))
(assert (not (= "y" "n" )))
(assert (not (= L3 "k" )))
(assert (not (= "" "y" )))
(assert (= L3 "g" ))
(assert (not (= L8 "q" )))
(assert (not (= L0 "q" )))
(assert (not (= L1 "p" )))
(check-sat)
(get-model)
(exit)
