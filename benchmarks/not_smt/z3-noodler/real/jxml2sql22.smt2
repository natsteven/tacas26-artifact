(set-logic ALL)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool 	(or (and (= x "") (= y "")) 		(and (not (= x "")) (not (= y "")) 			(let ((x_head (str.at x 0)) 				(y_head (str.at y 0)) 				(x_tail (str.substr x 1 (- (str.len x) 1))) 				(y_tail (str.substr y 1 (- (str.len y) 1)))) 			(and (= (str.to_code y_head) 				(ite (and (<= 65 (str.to_code x_head)) (<= (str.to_code x_head) 90)) 					(+ (str.to_code x_head) 32) 					(str.to_code x_head))) 				(toLower x_tail y_tail))))))
(declare-fun sym20 () String)
(declare-fun sym205 () String)
(declare-fun sym239 () String)
(declare-fun sym175 () String)
(declare-fun sym264 () String)
(declare-fun sym254 () String)
(declare-fun sym299 () String)
(declare-fun sym289 () String)
(declare-fun sym113 () String)
(declare-fun sym135 () String)
(declare-fun sym279 () String)
(declare-fun sym225 () String)
(declare-fun sym215 () String)
(declare-fun sym160 () String)
(declare-fun sym150 () String)
(declare-fun sym195 () String)
(declare-fun sym185 () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "D") (str.to_re "E") (str.to_re "F") (str.to_re "G") (str.to_re "H") (str.to_re "I") (str.to_re "J") (str.to_re "K") (str.to_re "L") (str.to_re "M") (str.to_re "N") (str.to_re "O") (str.to_re "P") (str.to_re "Q") (str.to_re "R") (str.to_re "S") (str.to_re "T") (str.to_re "U") (str.to_re "V") (str.to_re "W") (str.to_re "X") (str.to_re "Y") (str.to_re "Z") (str.to_re "a") (str.to_re "b") (str.to_re "c") (str.to_re "d") (str.to_re "e") (str.to_re "f") (str.to_re "g") (str.to_re "h") (str.to_re "i") (str.to_re "j") (str.to_re "k") (str.to_re "l") (str.to_re "m") (str.to_re "n") (str.to_re "o") (str.to_re "p") (str.to_re "q") (str.to_re "r") (str.to_re "s") (str.to_re "t") (str.to_re "u") (str.to_re "v") (str.to_re "w") (str.to_re "x") (str.to_re "y") (str.to_re "z") ))
)
(declare-fun L0  () String)
(assert (toLower sym175  L0 ))
(declare-fun L2  () String)
(assert (toLower sym225  L2 ))
(declare-fun L1  () String)
(assert (toLower "name"  L1 ))
(declare-fun L4  () String)
(assert (toLower sym289  L4 ))
(declare-fun L3  () String)
(assert (toLower "table"  L3 ))
(declare-fun L22  () String)
(assert (toLower sym195  L22 ))
(declare-fun L6  () String)
(assert (toLower sym20  L6 ))
(declare-fun L32  () String)
(assert (toLower sym185  L32 ))
(declare-fun L10  () String)
(assert (toLower sym254  L10 ))
(declare-fun L5  () String)
(assert (toLower "description"  L5 ))
(declare-fun L20  () String)
(assert (toLower sym279  L20 ))
(declare-fun L8  () String)
(assert (toLower "field"  L8 ))
(declare-fun L30  () String)
(assert (toLower sym205  L30 ))
(declare-fun L7  () String)
(assert (toLower sym299  L7 ))
(declare-fun L26  () String)
(assert (toLower sym239  L26 ))
(declare-fun L14  () String)
(assert (toLower sym215  L14 ))
(declare-fun L24  () String)
(assert (toLower sym135  L24 ))
(declare-fun L12  () String)
(assert (toLower sym264  L12 ))
(declare-fun L18  () String)
(assert (toLower sym150  L18 ))
(declare-fun L28  () String)
(assert (toLower sym160  L28 ))
(declare-fun L17  () String)
(assert (toLower "database"  L17 ))
(declare-fun L16  () String)
(assert (toLower sym113  L16 ))

(assert (str.in_re sym185 Alphabet))
(assert (str.in_re sym195 Alphabet))
(assert (str.in_re sym150 Alphabet))
(assert (str.in_re sym160 Alphabet))
(assert (str.in_re sym215 Alphabet))
(assert (str.in_re sym225 Alphabet))
(assert (str.in_re sym279 Alphabet))
(assert (str.in_re sym135 Alphabet))
(assert (str.in_re sym113 Alphabet))
(assert (str.in_re sym289 Alphabet))
(assert (str.in_re sym299 Alphabet))
(assert (str.in_re sym254 Alphabet))
(assert (str.in_re sym264 Alphabet))
(assert (str.in_re sym175 Alphabet))
(assert (str.in_re sym239 Alphabet))
(assert (str.in_re sym205 Alphabet))
(assert (str.in_re sym20 Alphabet))
(assert (not (= L0 L1 )))
(assert (= L2 L3 ))
(assert (not (= L4 L5 )))
(assert (not (= L6 "sql" )))
(assert (not (= L7 L8 )))
(assert (= L6 "html" ))
(assert (not (= L10 L1 )))
(assert (= L12 L5 ))
(assert (not (= L14 L5 )))
(assert (= L16 L17 ))
(assert (not (= L18 L1 )))
(assert (not (= L20 L1 )))
(assert (not (= L22 L3 )))
(assert (= L24 L1 ))
(assert (= L26 L1 ))
(assert (= L28 L5 ))
(assert (not (= L30 L1 )))
(assert (not (= L32 L5 )))
(check-sat)
(get-model)
(exit)
